plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.8.1'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://dl.bintray.com/qameta/maven-unstable/" }
    mavenCentral()
    mavenLocal()
}

def allureVersion = "2.14.0",
    selenideVersion = "5.22.0",
    junitVersion = "5.8.0-M1",
    appiumVersion = "7.5.1",
    slf4jVersion = "1.7.30",
    ownerVersion = "1.0.12",
    aspectjVersion = "1.9.6",
    restAssuredVersion = "4.3.3",
    assertjVersion = "3.19.0",
    lombokVersion = "1.18.20",
    fakerVersion = "1.0.2",
    jacksonVersion = "2.12.1",
    proxyVersion = "2.1.2"

allure {
    version = allureVersion
    autoconfigure = true
    aspectjweaver = true
    configuration = "testImplementation"
    useJUnit5 {
        version = allureVersion
    }
}

dependencies {
    testImplementation(
            "com.browserup:browserup-proxy-core:${proxyVersion}",
            "org.projectlombok:lombok:${lombokVersion}",
            "com.github.javafaker:javafaker:${fakerVersion}",
            "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
            "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
            "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}",
            "org.assertj:assertj-core:${assertjVersion}",
            "org.slf4j:slf4j-api:${slf4jVersion}",
            "org.aspectj:aspectjweaver:${aspectjVersion}",
            "com.codeborne:selenide:${selenideVersion}",
            "io.qameta.allure:allure-java-commons:${allureVersion}",
            "io.qameta.allure:allure-rest-assured:${allureVersion}",
            "io.qameta.allure:allure-selenide:${allureVersion}",
            "io.appium:java-client:${appiumVersion}",
            "io.rest-assured:rest-assured:${restAssuredVersion}",
            "org.aeonbits.owner:owner:${ownerVersion}",
            "org.junit.jupiter:junit-jupiter-params:${junitVersion}",
            "org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    systemProperty("junit.jupiter.execution.parallel.enabled", "true")
    systemProperty("junit.jupiter.execution.parallel.config.strategy", "dynamic")
    systemProperty("junit.jupiter.extensions.autodetection.enabled", "true")
    useJUnitPlatform()
}

task web_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'web'
    }
}

task spotify_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'spotify_testsuite'
    }
}

task signup_test(type: Test) {
    useJUnitPlatform {
        includeTags 'signup'
    }
}

task download_test(type: Test) {
    useJUnitPlatform {
        includeTags 'download'
    }
}

task api_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'api'
    }
}

task mob_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'mobile'
    }
}

task login_test(type: Test) {
    useJUnitPlatform {
        includeTags 'login'
    }
}

task account_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'account'
    }
}